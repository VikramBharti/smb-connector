// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "request.pb.h"
#include "response.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class Command;
class Status;
class Message;

// ===================================================================

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string requestId = 1;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIdFieldNumber = 1;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // required uint32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Command)
 private:
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* requestid_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Status)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Command command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::Command& command() const;
  inline ::Command* mutable_command();
  inline ::Command* release_command();
  inline void set_allocated_command(::Command* command);

  // optional .RequestPacket requestPacket = 2;
  inline bool has_requestpacket() const;
  inline void clear_requestpacket();
  static const int kRequestPacketFieldNumber = 2;
  inline const ::RequestPacket& requestpacket() const;
  inline ::RequestPacket* mutable_requestpacket();
  inline ::RequestPacket* release_requestpacket();
  inline void set_allocated_requestpacket(::RequestPacket* requestpacket);

  // optional .ResponsePacket responsePacket = 3;
  inline bool has_responsepacket() const;
  inline void clear_responsepacket();
  static const int kResponsePacketFieldNumber = 3;
  inline const ::ResponsePacket& responsepacket() const;
  inline ::ResponsePacket* mutable_responsepacket();
  inline ::ResponsePacket* release_responsepacket();
  inline void set_allocated_responsepacket(::ResponsePacket* responsepacket);

  // optional .Status status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline const ::Status& status() const;
  inline ::Status* mutable_status();
  inline ::Status* release_status();
  inline void set_allocated_status(::Status* status);

  // @@protoc_insertion_point(class_scope:Message)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_requestpacket();
  inline void clear_has_requestpacket();
  inline void set_has_responsepacket();
  inline void clear_has_responsepacket();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Command* command_;
  ::RequestPacket* requestpacket_;
  ::ResponsePacket* responsepacket_;
  ::Status* status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Command

// required string requestId = 1;
inline bool Command::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_requestid() {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    requestid_->clear();
  }
  clear_has_requestid();
}
inline const ::std::string& Command::requestid() const {
  return *requestid_;
}
inline void Command::set_requestid(const ::std::string& value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void Command::set_requestid(const char* value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void Command::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_requestid() {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  return requestid_;
}
inline ::std::string* Command::release_requestid() {
  clear_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestid_;
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command::set_allocated_requestid(::std::string* requestid) {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (requestid) {
    set_has_requestid();
    requestid_ = requestid;
  } else {
    clear_has_requestid();
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 cmd = 2;
inline bool Command::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 Command::cmd() const {
  return cmd_;
}
inline void Command::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// -------------------------------------------------------------------

// Status

// required int32 code = 1;
inline bool Status::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Status::code() const {
  return code_;
}
inline void Status::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required string msg = 2;
inline bool Status::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Status::msg() const {
  return *msg_;
}
inline void Status::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Status::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Status::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Status::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Status::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Status::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Message

// required .Command command = 1;
inline bool Message::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_command() {
  if (command_ != NULL) command_->::Command::Clear();
  clear_has_command();
}
inline const ::Command& Message::command() const {
  return command_ != NULL ? *command_ : *default_instance_->command_;
}
inline ::Command* Message::mutable_command() {
  set_has_command();
  if (command_ == NULL) command_ = new ::Command;
  return command_;
}
inline ::Command* Message::release_command() {
  clear_has_command();
  ::Command* temp = command_;
  command_ = NULL;
  return temp;
}
inline void Message::set_allocated_command(::Command* command) {
  delete command_;
  command_ = command;
  if (command) {
    set_has_command();
  } else {
    clear_has_command();
  }
}

// optional .RequestPacket requestPacket = 2;
inline bool Message::has_requestpacket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_requestpacket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_requestpacket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_requestpacket() {
  if (requestpacket_ != NULL) requestpacket_->::RequestPacket::Clear();
  clear_has_requestpacket();
}
inline const ::RequestPacket& Message::requestpacket() const {
  return requestpacket_ != NULL ? *requestpacket_ : *default_instance_->requestpacket_;
}
inline ::RequestPacket* Message::mutable_requestpacket() {
  set_has_requestpacket();
  if (requestpacket_ == NULL) requestpacket_ = new ::RequestPacket;
  return requestpacket_;
}
inline ::RequestPacket* Message::release_requestpacket() {
  clear_has_requestpacket();
  ::RequestPacket* temp = requestpacket_;
  requestpacket_ = NULL;
  return temp;
}
inline void Message::set_allocated_requestpacket(::RequestPacket* requestpacket) {
  delete requestpacket_;
  requestpacket_ = requestpacket;
  if (requestpacket) {
    set_has_requestpacket();
  } else {
    clear_has_requestpacket();
  }
}

// optional .ResponsePacket responsePacket = 3;
inline bool Message::has_responsepacket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_responsepacket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_responsepacket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_responsepacket() {
  if (responsepacket_ != NULL) responsepacket_->::ResponsePacket::Clear();
  clear_has_responsepacket();
}
inline const ::ResponsePacket& Message::responsepacket() const {
  return responsepacket_ != NULL ? *responsepacket_ : *default_instance_->responsepacket_;
}
inline ::ResponsePacket* Message::mutable_responsepacket() {
  set_has_responsepacket();
  if (responsepacket_ == NULL) responsepacket_ = new ::ResponsePacket;
  return responsepacket_;
}
inline ::ResponsePacket* Message::release_responsepacket() {
  clear_has_responsepacket();
  ::ResponsePacket* temp = responsepacket_;
  responsepacket_ = NULL;
  return temp;
}
inline void Message::set_allocated_responsepacket(::ResponsePacket* responsepacket) {
  delete responsepacket_;
  responsepacket_ = responsepacket;
  if (responsepacket) {
    set_has_responsepacket();
  } else {
    clear_has_responsepacket();
  }
}

// optional .Status status = 4;
inline bool Message::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_status() {
  if (status_ != NULL) status_->::Status::Clear();
  clear_has_status();
}
inline const ::Status& Message::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::Status* Message::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::Status;
  return status_;
}
inline ::Status* Message::release_status() {
  clear_has_status();
  ::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void Message::set_allocated_status(::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
