// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ResponsePacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponsePacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* FolderStructureResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FolderStructureResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadInitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadInitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConnectionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConnectionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFolderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFolderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteResourceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteResourceResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_response_2eproto() {
  protobuf_AddDesc_response_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "response.proto");
  GOOGLE_CHECK(file != NULL);
  ResponsePacket_descriptor_ = file->message_type(0);
  static const int ResponsePacket_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePacket, folderstructureresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePacket, downloadinitresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePacket, downloaddataresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePacket, testconnectionresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePacket, addfolderresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePacket, deleteresourceresponse_),
  };
  ResponsePacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponsePacket_descriptor_,
      ResponsePacket::default_instance_,
      ResponsePacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponsePacket));
  FolderStructureResponse_descriptor_ = file->message_type(1);
  static const int FolderStructureResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderStructureResponse, fileinformation_),
  };
  FolderStructureResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FolderStructureResponse_descriptor_,
      FolderStructureResponse::default_instance_,
      FolderStructureResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderStructureResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderStructureResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FolderStructureResponse));
  FileInformation_descriptor_ = file->message_type(2);
  static const int FileInformation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInformation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInformation, resourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInformation, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInformation, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInformation, modifiedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInformation, isdirectory_),
  };
  FileInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileInformation_descriptor_,
      FileInformation::default_instance_,
      FileInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileInformation));
  DownloadInitResponse_descriptor_ = file->message_type(3);
  static const int DownloadInitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadInitResponse, fileinformation_),
  };
  DownloadInitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadInitResponse_descriptor_,
      DownloadInitResponse::default_instance_,
      DownloadInitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadInitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadInitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadInitResponse));
  DownloadDataResponse_descriptor_ = file->message_type(4);
  static const int DownloadDataResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataResponse, data_),
  };
  DownloadDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadDataResponse_descriptor_,
      DownloadDataResponse::default_instance_,
      DownloadDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadDataResponse));
  TestConnectionResponse_descriptor_ = file->message_type(5);
  static const int TestConnectionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConnectionResponse, fileinformation_),
  };
  TestConnectionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConnectionResponse_descriptor_,
      TestConnectionResponse::default_instance_,
      TestConnectionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConnectionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConnectionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConnectionResponse));
  AddFolderResponse_descriptor_ = file->message_type(6);
  static const int AddFolderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFolderResponse, fileinformation_),
  };
  AddFolderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFolderResponse_descriptor_,
      AddFolderResponse::default_instance_,
      AddFolderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFolderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFolderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFolderResponse));
  DeleteResourceResponse_descriptor_ = file->message_type(7);
  static const int DeleteResourceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResourceResponse, fileinformation_),
  };
  DeleteResourceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteResourceResponse_descriptor_,
      DeleteResourceResponse::default_instance_,
      DeleteResourceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResourceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResourceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteResourceResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_response_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponsePacket_descriptor_, &ResponsePacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FolderStructureResponse_descriptor_, &FolderStructureResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileInformation_descriptor_, &FileInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadInitResponse_descriptor_, &DownloadInitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadDataResponse_descriptor_, &DownloadDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConnectionResponse_descriptor_, &TestConnectionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFolderResponse_descriptor_, &AddFolderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteResourceResponse_descriptor_, &DeleteResourceResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_response_2eproto() {
  delete ResponsePacket::default_instance_;
  delete ResponsePacket_reflection_;
  delete FolderStructureResponse::default_instance_;
  delete FolderStructureResponse_reflection_;
  delete FileInformation::default_instance_;
  delete FileInformation_reflection_;
  delete DownloadInitResponse::default_instance_;
  delete DownloadInitResponse_reflection_;
  delete DownloadDataResponse::default_instance_;
  delete DownloadDataResponse_reflection_;
  delete TestConnectionResponse::default_instance_;
  delete TestConnectionResponse_reflection_;
  delete AddFolderResponse::default_instance_;
  delete AddFolderResponse_reflection_;
  delete DeleteResourceResponse::default_instance_;
  delete DeleteResourceResponse_reflection_;
}

void protobuf_AddDesc_response_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016response.proto\"\326\002\n\016ResponsePacket\0229\n\027f"
    "olderStructureResponse\030\001 \001(\0132\030.FolderStr"
    "uctureResponse\0223\n\024downloadInitResponse\030\002"
    " \001(\0132\025.DownloadInitResponse\0223\n\024downloadD"
    "ataResponse\030\003 \001(\0132\025.DownloadDataResponse"
    "\0227\n\026testConnectionResponse\030\004 \001(\0132\027.TestC"
    "onnectionResponse\022-\n\021addFolderResponse\030\005"
    " \001(\0132\022.AddFolderResponse\0227\n\026deleteResour"
    "ceResponse\030\006 \001(\0132\027.DeleteResourceRespons"
    "e\"D\n\027FolderStructureResponse\022)\n\017fileInfo"
    "rmation\030\001 \003(\0132\020.FileInformation\"\202\001\n\017File"
    "Information\022\014\n\004name\030\001 \001(\t\022\024\n\014resourceTyp"
    "e\030\002 \001(\r\022\014\n\004size\030\003 \001(\004\022\022\n\ncreateTime\030\004 \001("
    "\004\022\024\n\014modifiedTime\030\005 \001(\004\022\023\n\013isDirectory\030\006"
    " \001(\010\"A\n\024DownloadInitResponse\022)\n\017fileInfo"
    "rmation\030\001 \002(\0132\020.FileInformation\"$\n\024Downl"
    "oadDataResponse\022\014\n\004data\030\001 \002(\014\"C\n\026TestCon"
    "nectionResponse\022)\n\017fileInformation\030\001 \002(\013"
    "2\020.FileInformation\">\n\021AddFolderResponse\022"
    ")\n\017fileInformation\030\001 \002(\0132\020.FileInformati"
    "on\"C\n\026DeleteResourceResponse\022)\n\017fileInfo"
    "rmation\030\001 \002(\0132\020.FileInformation", 871);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "response.proto", &protobuf_RegisterTypes);
  ResponsePacket::default_instance_ = new ResponsePacket();
  FolderStructureResponse::default_instance_ = new FolderStructureResponse();
  FileInformation::default_instance_ = new FileInformation();
  DownloadInitResponse::default_instance_ = new DownloadInitResponse();
  DownloadDataResponse::default_instance_ = new DownloadDataResponse();
  TestConnectionResponse::default_instance_ = new TestConnectionResponse();
  AddFolderResponse::default_instance_ = new AddFolderResponse();
  DeleteResourceResponse::default_instance_ = new DeleteResourceResponse();
  ResponsePacket::default_instance_->InitAsDefaultInstance();
  FolderStructureResponse::default_instance_->InitAsDefaultInstance();
  FileInformation::default_instance_->InitAsDefaultInstance();
  DownloadInitResponse::default_instance_->InitAsDefaultInstance();
  DownloadDataResponse::default_instance_->InitAsDefaultInstance();
  TestConnectionResponse::default_instance_->InitAsDefaultInstance();
  AddFolderResponse::default_instance_->InitAsDefaultInstance();
  DeleteResourceResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_response_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_response_2eproto {
  StaticDescriptorInitializer_response_2eproto() {
    protobuf_AddDesc_response_2eproto();
  }
} static_descriptor_initializer_response_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ResponsePacket::kFolderStructureResponseFieldNumber;
const int ResponsePacket::kDownloadInitResponseFieldNumber;
const int ResponsePacket::kDownloadDataResponseFieldNumber;
const int ResponsePacket::kTestConnectionResponseFieldNumber;
const int ResponsePacket::kAddFolderResponseFieldNumber;
const int ResponsePacket::kDeleteResourceResponseFieldNumber;
#endif  // !_MSC_VER

ResponsePacket::ResponsePacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponsePacket::InitAsDefaultInstance() {
  folderstructureresponse_ = const_cast< ::FolderStructureResponse*>(&::FolderStructureResponse::default_instance());
  downloadinitresponse_ = const_cast< ::DownloadInitResponse*>(&::DownloadInitResponse::default_instance());
  downloaddataresponse_ = const_cast< ::DownloadDataResponse*>(&::DownloadDataResponse::default_instance());
  testconnectionresponse_ = const_cast< ::TestConnectionResponse*>(&::TestConnectionResponse::default_instance());
  addfolderresponse_ = const_cast< ::AddFolderResponse*>(&::AddFolderResponse::default_instance());
  deleteresourceresponse_ = const_cast< ::DeleteResourceResponse*>(&::DeleteResourceResponse::default_instance());
}

ResponsePacket::ResponsePacket(const ResponsePacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponsePacket::SharedCtor() {
  _cached_size_ = 0;
  folderstructureresponse_ = NULL;
  downloadinitresponse_ = NULL;
  downloaddataresponse_ = NULL;
  testconnectionresponse_ = NULL;
  addfolderresponse_ = NULL;
  deleteresourceresponse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponsePacket::~ResponsePacket() {
  SharedDtor();
}

void ResponsePacket::SharedDtor() {
  if (this != default_instance_) {
    delete folderstructureresponse_;
    delete downloadinitresponse_;
    delete downloaddataresponse_;
    delete testconnectionresponse_;
    delete addfolderresponse_;
    delete deleteresourceresponse_;
  }
}

void ResponsePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponsePacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponsePacket_descriptor_;
}

const ResponsePacket& ResponsePacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

ResponsePacket* ResponsePacket::default_instance_ = NULL;

ResponsePacket* ResponsePacket::New() const {
  return new ResponsePacket;
}

void ResponsePacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_folderstructureresponse()) {
      if (folderstructureresponse_ != NULL) folderstructureresponse_->::FolderStructureResponse::Clear();
    }
    if (has_downloadinitresponse()) {
      if (downloadinitresponse_ != NULL) downloadinitresponse_->::DownloadInitResponse::Clear();
    }
    if (has_downloaddataresponse()) {
      if (downloaddataresponse_ != NULL) downloaddataresponse_->::DownloadDataResponse::Clear();
    }
    if (has_testconnectionresponse()) {
      if (testconnectionresponse_ != NULL) testconnectionresponse_->::TestConnectionResponse::Clear();
    }
    if (has_addfolderresponse()) {
      if (addfolderresponse_ != NULL) addfolderresponse_->::AddFolderResponse::Clear();
    }
    if (has_deleteresourceresponse()) {
      if (deleteresourceresponse_ != NULL) deleteresourceresponse_->::DeleteResourceResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponsePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FolderStructureResponse folderStructureResponse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_folderstructureresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_downloadInitResponse;
        break;
      }

      // optional .DownloadInitResponse downloadInitResponse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downloadInitResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_downloadinitresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_downloadDataResponse;
        break;
      }

      // optional .DownloadDataResponse downloadDataResponse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downloadDataResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_downloaddataresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_testConnectionResponse;
        break;
      }

      // optional .TestConnectionResponse testConnectionResponse = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_testConnectionResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_testconnectionresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_addFolderResponse;
        break;
      }

      // optional .AddFolderResponse addFolderResponse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addFolderResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addfolderresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deleteResourceResponse;
        break;
      }

      // optional .DeleteResourceResponse deleteResourceResponse = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deleteResourceResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deleteresourceresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponsePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FolderStructureResponse folderStructureResponse = 1;
  if (has_folderstructureresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->folderstructureresponse(), output);
  }

  // optional .DownloadInitResponse downloadInitResponse = 2;
  if (has_downloadinitresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->downloadinitresponse(), output);
  }

  // optional .DownloadDataResponse downloadDataResponse = 3;
  if (has_downloaddataresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->downloaddataresponse(), output);
  }

  // optional .TestConnectionResponse testConnectionResponse = 4;
  if (has_testconnectionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->testconnectionresponse(), output);
  }

  // optional .AddFolderResponse addFolderResponse = 5;
  if (has_addfolderresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->addfolderresponse(), output);
  }

  // optional .DeleteResourceResponse deleteResourceResponse = 6;
  if (has_deleteresourceresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->deleteresourceresponse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponsePacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FolderStructureResponse folderStructureResponse = 1;
  if (has_folderstructureresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->folderstructureresponse(), target);
  }

  // optional .DownloadInitResponse downloadInitResponse = 2;
  if (has_downloadinitresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->downloadinitresponse(), target);
  }

  // optional .DownloadDataResponse downloadDataResponse = 3;
  if (has_downloaddataresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->downloaddataresponse(), target);
  }

  // optional .TestConnectionResponse testConnectionResponse = 4;
  if (has_testconnectionresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->testconnectionresponse(), target);
  }

  // optional .AddFolderResponse addFolderResponse = 5;
  if (has_addfolderresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->addfolderresponse(), target);
  }

  // optional .DeleteResourceResponse deleteResourceResponse = 6;
  if (has_deleteresourceresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->deleteresourceresponse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponsePacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FolderStructureResponse folderStructureResponse = 1;
    if (has_folderstructureresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->folderstructureresponse());
    }

    // optional .DownloadInitResponse downloadInitResponse = 2;
    if (has_downloadinitresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->downloadinitresponse());
    }

    // optional .DownloadDataResponse downloadDataResponse = 3;
    if (has_downloaddataresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->downloaddataresponse());
    }

    // optional .TestConnectionResponse testConnectionResponse = 4;
    if (has_testconnectionresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->testconnectionresponse());
    }

    // optional .AddFolderResponse addFolderResponse = 5;
    if (has_addfolderresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addfolderresponse());
    }

    // optional .DeleteResourceResponse deleteResourceResponse = 6;
    if (has_deleteresourceresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deleteresourceresponse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponsePacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponsePacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponsePacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponsePacket::MergeFrom(const ResponsePacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_folderstructureresponse()) {
      mutable_folderstructureresponse()->::FolderStructureResponse::MergeFrom(from.folderstructureresponse());
    }
    if (from.has_downloadinitresponse()) {
      mutable_downloadinitresponse()->::DownloadInitResponse::MergeFrom(from.downloadinitresponse());
    }
    if (from.has_downloaddataresponse()) {
      mutable_downloaddataresponse()->::DownloadDataResponse::MergeFrom(from.downloaddataresponse());
    }
    if (from.has_testconnectionresponse()) {
      mutable_testconnectionresponse()->::TestConnectionResponse::MergeFrom(from.testconnectionresponse());
    }
    if (from.has_addfolderresponse()) {
      mutable_addfolderresponse()->::AddFolderResponse::MergeFrom(from.addfolderresponse());
    }
    if (from.has_deleteresourceresponse()) {
      mutable_deleteresourceresponse()->::DeleteResourceResponse::MergeFrom(from.deleteresourceresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponsePacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePacket::CopyFrom(const ResponsePacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePacket::IsInitialized() const {

  if (has_downloadinitresponse()) {
    if (!this->downloadinitresponse().IsInitialized()) return false;
  }
  if (has_downloaddataresponse()) {
    if (!this->downloaddataresponse().IsInitialized()) return false;
  }
  if (has_testconnectionresponse()) {
    if (!this->testconnectionresponse().IsInitialized()) return false;
  }
  if (has_addfolderresponse()) {
    if (!this->addfolderresponse().IsInitialized()) return false;
  }
  if (has_deleteresourceresponse()) {
    if (!this->deleteresourceresponse().IsInitialized()) return false;
  }
  return true;
}

void ResponsePacket::Swap(ResponsePacket* other) {
  if (other != this) {
    std::swap(folderstructureresponse_, other->folderstructureresponse_);
    std::swap(downloadinitresponse_, other->downloadinitresponse_);
    std::swap(downloaddataresponse_, other->downloaddataresponse_);
    std::swap(testconnectionresponse_, other->testconnectionresponse_);
    std::swap(addfolderresponse_, other->addfolderresponse_);
    std::swap(deleteresourceresponse_, other->deleteresourceresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponsePacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponsePacket_descriptor_;
  metadata.reflection = ResponsePacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FolderStructureResponse::kFileInformationFieldNumber;
#endif  // !_MSC_VER

FolderStructureResponse::FolderStructureResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FolderStructureResponse::InitAsDefaultInstance() {
}

FolderStructureResponse::FolderStructureResponse(const FolderStructureResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FolderStructureResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FolderStructureResponse::~FolderStructureResponse() {
  SharedDtor();
}

void FolderStructureResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FolderStructureResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FolderStructureResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FolderStructureResponse_descriptor_;
}

const FolderStructureResponse& FolderStructureResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

FolderStructureResponse* FolderStructureResponse::default_instance_ = NULL;

FolderStructureResponse* FolderStructureResponse::New() const {
  return new FolderStructureResponse;
}

void FolderStructureResponse::Clear() {
  fileinformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FolderStructureResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FileInformation fileInformation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileInformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinformation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fileInformation;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FolderStructureResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FileInformation fileInformation = 1;
  for (int i = 0; i < this->fileinformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fileinformation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FolderStructureResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FileInformation fileInformation = 1;
  for (int i = 0; i < this->fileinformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fileinformation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FolderStructureResponse::ByteSize() const {
  int total_size = 0;

  // repeated .FileInformation fileInformation = 1;
  total_size += 1 * this->fileinformation_size();
  for (int i = 0; i < this->fileinformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FolderStructureResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FolderStructureResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FolderStructureResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FolderStructureResponse::MergeFrom(const FolderStructureResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileinformation_.MergeFrom(from.fileinformation_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FolderStructureResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FolderStructureResponse::CopyFrom(const FolderStructureResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderStructureResponse::IsInitialized() const {

  return true;
}

void FolderStructureResponse::Swap(FolderStructureResponse* other) {
  if (other != this) {
    fileinformation_.Swap(&other->fileinformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FolderStructureResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FolderStructureResponse_descriptor_;
  metadata.reflection = FolderStructureResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileInformation::kNameFieldNumber;
const int FileInformation::kResourceTypeFieldNumber;
const int FileInformation::kSizeFieldNumber;
const int FileInformation::kCreateTimeFieldNumber;
const int FileInformation::kModifiedTimeFieldNumber;
const int FileInformation::kIsDirectoryFieldNumber;
#endif  // !_MSC_VER

FileInformation::FileInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileInformation::InitAsDefaultInstance() {
}

FileInformation::FileInformation(const FileInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileInformation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourcetype_ = 0u;
  size_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  modifiedtime_ = GOOGLE_ULONGLONG(0);
  isdirectory_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInformation::~FileInformation() {
  SharedDtor();
}

void FileInformation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FileInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInformation_descriptor_;
}

const FileInformation& FileInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

FileInformation* FileInformation::default_instance_ = NULL;

FileInformation* FileInformation::New() const {
  return new FileInformation;
}

void FileInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    resourcetype_ = 0u;
    size_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    modifiedtime_ = GOOGLE_ULONGLONG(0);
    isdirectory_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resourceType;
        break;
      }

      // optional uint32 resourceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourcetype_)));
          set_has_resourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional uint64 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_createTime;
        break;
      }

      // optional uint64 createTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_modifiedTime;
        break;
      }

      // optional uint64 modifiedTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifiedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modifiedtime_)));
          set_has_modifiedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isDirectory;
        break;
      }

      // optional bool isDirectory = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDirectory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdirectory_)));
          set_has_isdirectory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 resourceType = 2;
  if (has_resourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resourcetype(), output);
  }

  // optional uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // optional uint64 createTime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->createtime(), output);
  }

  // optional uint64 modifiedTime = 5;
  if (has_modifiedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->modifiedtime(), output);
  }

  // optional bool isDirectory = 6;
  if (has_isdirectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdirectory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 resourceType = 2;
  if (has_resourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resourcetype(), target);
  }

  // optional uint64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // optional uint64 createTime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->createtime(), target);
  }

  // optional uint64 modifiedTime = 5;
  if (has_modifiedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->modifiedtime(), target);
  }

  // optional bool isDirectory = 6;
  if (has_isdirectory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdirectory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 resourceType = 2;
    if (has_resourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resourcetype());
    }

    // optional uint64 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint64 createTime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint64 modifiedTime = 5;
    if (has_modifiedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->modifiedtime());
    }

    // optional bool isDirectory = 6;
    if (has_isdirectory()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileInformation::MergeFrom(const FileInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_resourcetype()) {
      set_resourcetype(from.resourcetype());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_modifiedtime()) {
      set_modifiedtime(from.modifiedtime());
    }
    if (from.has_isdirectory()) {
      set_isdirectory(from.isdirectory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInformation::CopyFrom(const FileInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInformation::IsInitialized() const {

  return true;
}

void FileInformation::Swap(FileInformation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(resourcetype_, other->resourcetype_);
    std::swap(size_, other->size_);
    std::swap(createtime_, other->createtime_);
    std::swap(modifiedtime_, other->modifiedtime_);
    std::swap(isdirectory_, other->isdirectory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInformation_descriptor_;
  metadata.reflection = FileInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadInitResponse::kFileInformationFieldNumber;
#endif  // !_MSC_VER

DownloadInitResponse::DownloadInitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadInitResponse::InitAsDefaultInstance() {
  fileinformation_ = const_cast< ::FileInformation*>(&::FileInformation::default_instance());
}

DownloadInitResponse::DownloadInitResponse(const DownloadInitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadInitResponse::SharedCtor() {
  _cached_size_ = 0;
  fileinformation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadInitResponse::~DownloadInitResponse() {
  SharedDtor();
}

void DownloadInitResponse::SharedDtor() {
  if (this != default_instance_) {
    delete fileinformation_;
  }
}

void DownloadInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadInitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadInitResponse_descriptor_;
}

const DownloadInitResponse& DownloadInitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

DownloadInitResponse* DownloadInitResponse::default_instance_ = NULL;

DownloadInitResponse* DownloadInitResponse::New() const {
  return new DownloadInitResponse;
}

void DownloadInitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fileinformation()) {
      if (fileinformation_ != NULL) fileinformation_->::FileInformation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FileInformation fileInformation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fileinformation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FileInformation fileInformation = 1;
  if (has_fileinformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fileinformation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadInitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FileInformation fileInformation = 1;
  if (has_fileinformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fileinformation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadInitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FileInformation fileInformation = 1;
    if (has_fileinformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fileinformation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadInitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadInitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadInitResponse::MergeFrom(const DownloadInitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileinformation()) {
      mutable_fileinformation()->::FileInformation::MergeFrom(from.fileinformation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadInitResponse::CopyFrom(const DownloadInitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadInitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DownloadInitResponse::Swap(DownloadInitResponse* other) {
  if (other != this) {
    std::swap(fileinformation_, other->fileinformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadInitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadInitResponse_descriptor_;
  metadata.reflection = DownloadInitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadDataResponse::kDataFieldNumber;
#endif  // !_MSC_VER

DownloadDataResponse::DownloadDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadDataResponse::InitAsDefaultInstance() {
}

DownloadDataResponse::DownloadDataResponse(const DownloadDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadDataResponse::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadDataResponse::~DownloadDataResponse() {
  SharedDtor();
}

void DownloadDataResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DownloadDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadDataResponse_descriptor_;
}

const DownloadDataResponse& DownloadDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

DownloadDataResponse* DownloadDataResponse::default_instance_ = NULL;

DownloadDataResponse* DownloadDataResponse::New() const {
  return new DownloadDataResponse;
}

void DownloadDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadDataResponse::MergeFrom(const DownloadDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadDataResponse::CopyFrom(const DownloadDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DownloadDataResponse::Swap(DownloadDataResponse* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadDataResponse_descriptor_;
  metadata.reflection = DownloadDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestConnectionResponse::kFileInformationFieldNumber;
#endif  // !_MSC_VER

TestConnectionResponse::TestConnectionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConnectionResponse::InitAsDefaultInstance() {
  fileinformation_ = const_cast< ::FileInformation*>(&::FileInformation::default_instance());
}

TestConnectionResponse::TestConnectionResponse(const TestConnectionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConnectionResponse::SharedCtor() {
  _cached_size_ = 0;
  fileinformation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConnectionResponse::~TestConnectionResponse() {
  SharedDtor();
}

void TestConnectionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete fileinformation_;
  }
}

void TestConnectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConnectionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConnectionResponse_descriptor_;
}

const TestConnectionResponse& TestConnectionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

TestConnectionResponse* TestConnectionResponse::default_instance_ = NULL;

TestConnectionResponse* TestConnectionResponse::New() const {
  return new TestConnectionResponse;
}

void TestConnectionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fileinformation()) {
      if (fileinformation_ != NULL) fileinformation_->::FileInformation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConnectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FileInformation fileInformation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fileinformation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestConnectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FileInformation fileInformation = 1;
  if (has_fileinformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fileinformation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConnectionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FileInformation fileInformation = 1;
  if (has_fileinformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fileinformation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConnectionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FileInformation fileInformation = 1;
    if (has_fileinformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fileinformation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConnectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConnectionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConnectionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConnectionResponse::MergeFrom(const TestConnectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileinformation()) {
      mutable_fileinformation()->::FileInformation::MergeFrom(from.fileinformation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConnectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConnectionResponse::CopyFrom(const TestConnectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConnectionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestConnectionResponse::Swap(TestConnectionResponse* other) {
  if (other != this) {
    std::swap(fileinformation_, other->fileinformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConnectionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConnectionResponse_descriptor_;
  metadata.reflection = TestConnectionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFolderResponse::kFileInformationFieldNumber;
#endif  // !_MSC_VER

AddFolderResponse::AddFolderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFolderResponse::InitAsDefaultInstance() {
  fileinformation_ = const_cast< ::FileInformation*>(&::FileInformation::default_instance());
}

AddFolderResponse::AddFolderResponse(const AddFolderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFolderResponse::SharedCtor() {
  _cached_size_ = 0;
  fileinformation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFolderResponse::~AddFolderResponse() {
  SharedDtor();
}

void AddFolderResponse::SharedDtor() {
  if (this != default_instance_) {
    delete fileinformation_;
  }
}

void AddFolderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFolderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFolderResponse_descriptor_;
}

const AddFolderResponse& AddFolderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

AddFolderResponse* AddFolderResponse::default_instance_ = NULL;

AddFolderResponse* AddFolderResponse::New() const {
  return new AddFolderResponse;
}

void AddFolderResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fileinformation()) {
      if (fileinformation_ != NULL) fileinformation_->::FileInformation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFolderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FileInformation fileInformation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fileinformation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFolderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FileInformation fileInformation = 1;
  if (has_fileinformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fileinformation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFolderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FileInformation fileInformation = 1;
  if (has_fileinformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fileinformation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFolderResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FileInformation fileInformation = 1;
    if (has_fileinformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fileinformation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFolderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFolderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFolderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFolderResponse::MergeFrom(const AddFolderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileinformation()) {
      mutable_fileinformation()->::FileInformation::MergeFrom(from.fileinformation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFolderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFolderResponse::CopyFrom(const AddFolderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFolderResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddFolderResponse::Swap(AddFolderResponse* other) {
  if (other != this) {
    std::swap(fileinformation_, other->fileinformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFolderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFolderResponse_descriptor_;
  metadata.reflection = AddFolderResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteResourceResponse::kFileInformationFieldNumber;
#endif  // !_MSC_VER

DeleteResourceResponse::DeleteResourceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteResourceResponse::InitAsDefaultInstance() {
  fileinformation_ = const_cast< ::FileInformation*>(&::FileInformation::default_instance());
}

DeleteResourceResponse::DeleteResourceResponse(const DeleteResourceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteResourceResponse::SharedCtor() {
  _cached_size_ = 0;
  fileinformation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteResourceResponse::~DeleteResourceResponse() {
  SharedDtor();
}

void DeleteResourceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete fileinformation_;
  }
}

void DeleteResourceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteResourceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteResourceResponse_descriptor_;
}

const DeleteResourceResponse& DeleteResourceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

DeleteResourceResponse* DeleteResourceResponse::default_instance_ = NULL;

DeleteResourceResponse* DeleteResourceResponse::New() const {
  return new DeleteResourceResponse;
}

void DeleteResourceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fileinformation()) {
      if (fileinformation_ != NULL) fileinformation_->::FileInformation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteResourceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FileInformation fileInformation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fileinformation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteResourceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FileInformation fileInformation = 1;
  if (has_fileinformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fileinformation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteResourceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FileInformation fileInformation = 1;
  if (has_fileinformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fileinformation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteResourceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FileInformation fileInformation = 1;
    if (has_fileinformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fileinformation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteResourceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteResourceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteResourceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteResourceResponse::MergeFrom(const DeleteResourceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileinformation()) {
      mutable_fileinformation()->::FileInformation::MergeFrom(from.fileinformation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteResourceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResourceResponse::CopyFrom(const DeleteResourceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResourceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteResourceResponse::Swap(DeleteResourceResponse* other) {
  if (other != this) {
    std::swap(fileinformation_, other->fileinformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteResourceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteResourceResponse_descriptor_;
  metadata.reflection = DeleteResourceResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
